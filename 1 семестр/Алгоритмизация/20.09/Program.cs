
/*Для последовательности из н элементов
 * 1) определить наим длину подпоследовательности, состоящей из одинаковых элементов
 * 2)определить все ли элементы последовательности кратны номеру под которым они считываются
 * 3) определить максимальную длину подпоследовательности состоящей из различных элементов
 * 4) Определить образует ли заданная последовательность равномерно убывающую последовательность элементов*/


int n = int.Parse(Console.ReadLine());
int[] posledovatelnost = new int[n];
int c = -1;
int min = 0;
int c1 = 0;
int max = 0;
int c2 = 1;
int c3 = 0;
for (int i = 0; i < n; i++)
{
    posledovatelnost[i] = int.Parse(Console.ReadLine());
    if (posledovatelnost[i] % (i + 1) == 0)
    {
        c1++;
    }
}
for (int i = 0; i < n - 1; i++)
{
    if (posledovatelnost[i] == posledovatelnost[i + 1])
    {
        max = Math.Max(c2, max);
        c--;
        c2 = 1;
    }
    else
    {
        min = Math.Min(c, min);
        c = -1;
        c2++;
    }
    if (posledovatelnost[i] > posledovatelnost[i + 1]) { c3++; }
}
min = Math.Max(c, min);
if (c3 == n) { Console.WriteLine("Заданная последовательность образует равномерно убывающую последовательность элементов"); }
else { Console.WriteLine("Заданная последовательность не образует равномерно убывающую последовательность элементов"); }
Console.WriteLine($"Наименьшая длина подпоследовательности, состоящей из одинаковых элементов: {Math.Abs(min)}");
Console.WriteLine($"Максимальная длина подпоследовательности состоящей из различных элементов: {max}");
if (c1 == n) { Console.WriteLine("Все элементы кратны номеру под которым они считываются"); }
else { Console.WriteLine("Не все элементы кратны номеру под которым они считываются"); }
